blueprint:
  name: Frigate Notifications (Simple)
  domain: automation
  author: mgreen
  homeassistant:
    min_version: 2024.11.0
  source_url: https://github.com/m2015agg/HA_blueprints_frigate/blob/main/Frigate_Camera_Notifications/BetaV2.yaml
  description: "## Frigate Notifications (Simple)\n\nA streamlined Frigate notification
    blueprint focusing on:\n  - Camera selection\n  - Event type filtering (alerts,
    detections)\n  - Loitering detection\n  - Initial notification delay\n  - iOS
    mobile_app notifications\n"
  input:
    camera:
      name: Frigate Cameras
      description: Select the cameras to monitor.
      selector:
        entity:
          filter:
          - integration: frigate
            domain:
            - camera
          multiple: true
    notify_device:
      name: Mobile Device
      description: Choose an iOS device (mobile_app) to receive notifications.
      selector:
        device:
          filter:
          - integration: mobile_app
          multiple: false
    event_types:
      name: Event Types
      description: Which types of Frigate events to notify on.
      default:
      - alert
      - detection
      selector:
        select:
          options:
          - label: Alerts
            value: alert
          - label: Detections
            value: detection
          multiple: true
          custom_value: false
          sort: false
    loitering_types:
      name: Loitering Detection
      description: Notify when ‘pending_loitering’ is true or false.
      default:
      - 'true'
      - 'false'
      selector:
        select:
          options:
          - label: Pending Loitering
            value: 'true'
          - label: Non‑Loitering
            value: 'false'
          multiple: true
          custom_value: false
          sort: false
    initial_delay:
      name: Initial Delay
      description: Seconds to wait before sending the first notification.
      default: 0
      selector:
        number:
          min: 0.0
          max: 15.0
          unit_of_measurement: seconds
          step: 1.0
          mode: slider
    base_url:
      name: Base URL (Optional)
      description: External URL of your Home Assistant (for clips).
      default: ''
    mqtt_topic:
      name: MQTT Topic
      description: Topic where Frigate publishes review events.
      default: frigate/reviews
mode: parallel
trigger_variables:
  mqtt_topic: !input mqtt_topic
triggers:
  - platform: mqtt
    topic: "{{ mqtt_topic }}"
    value_template: "{{ value_json.type in ['alert', 'detection'] }}"
    id: frigate-event

variables:
  # Inputs from the UI
  input_camera: !input camera
  input_event_types: !input event_types
  input_loitering_types: !input loitering_types
  initial_delay: !input initial_delay
  input_base_url: !input base_url

  # Expand camera names into a list for matching
  input_camera_names: >
    {{ input_camera
      | expand
      | map(attribute="attributes.camera_name")
      | list }}

  # Grab the Frigate event payload
  camera: >
    {{ trigger.payload_json["after"]["camera"]
      if trigger.id == "frigate-event" }}
  camera_name: '{{ camera.replace("_"," ") | title }}'
  event_type: >
    {{ trigger.payload_json["type"]
      if trigger.id == "frigate-event" }}

  # Pull pending_loitering out of the payload and coerce to string
  pending_loitering: >
    {{ trigger.payload_json["after"]
      .get("pending_loitering", false)
      | string }}

  # Precompute whether loitering matches the user’s selection
  loitering_satisfied: >
    {{ pending_loitering in input_loitering_types }}

  # Clean up the base URL once, for later use in templates
  base_url: >
    {{ input_base_url.rstrip("/") }}


    '
conditions:
- condition: and
  conditions:
  - condition: trigger
    id: frigate-event
  - condition: template
    value_template: '{{ camera in input_camera_names }}

      '
  - condition: template
    value_template: '{{ event_type in input_event_types }}

      '
  - condition: template
    value_template: '{{ loitering_satisfied }}

      '
action:
- delay: '{{ initial_delay }}'
- device_id: !input notify_device
  domain: mobile_app
  type: notify
  title: "{{ \"Loitering\" if pending_loitering == \"true\"\n   else \"Detection\"
    }} on {{ camera_name }}\n"
  message: "{{ \"Object stopped\" if pending_loitering == \"true\"\n   else \"Object
    detected\" }} on {{ camera_name }}\n"
  data:
    tag: '{{ trigger.payload_json["after"]["data"]["detections"][0] }}

      '
    group: '{{ camera }}-frigate-notification'
    image: '{{ base_url }}/api/frigate/notifications/{{ trigger.payload_json["after"]["data"]["detections"][0]
      }}/thumbnail.jpg

      '
    video: '{{ base_url }}/api/frigate/notifications/{{ trigger.payload_json["after"]["data"]["detections"][0]
      }}/{{ camera }}/clip.mp4

      '
    clickAction: '{{ base_url }}/api/frigate/notifications/{{ trigger.payload_json["after"]["data"]["detections"][0]
      }}/{{ camera }}/clip.mp4

      '
    ttl: 0
    priority: high
    notification_icon: mdi:car
    channel: alarm_stream
    actions:
    - action: URI
      title: View Clip
      uri: '{{ base_url }}/api/frigate/notifications/{{ trigger.payload_json["after"]["data"]["detections"][0]
        }}/{{ camera }}/clip.mp4

        '
    - action: URI
      title: View Snapshot
      uri: '{{ base_url }}/api/frigate/notifications/{{ trigger.payload_json["after"]["data"]["detections"][0]
        }}/snapshot.jpg

        '
