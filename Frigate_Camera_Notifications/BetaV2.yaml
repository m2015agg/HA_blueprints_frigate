blueprint:
  name: Frigate Notifications (Simple)
  domain: automation
  author: mgreen
  description: |
    A streamlined Frigate notification blueprint focusing on:
      - Camera selection
      - Event type filtering (alerts, detections)
      - Loitering detection
      - Initial notification delay
      - iOS mobile_app notifications
  source_url: "https://github.com/m2015agg/HA_blueprints_frigate/blob/main/Frigate_Camera_Notifications/BetaV2.yaml"
  homeassistant:
    min_version: 2024.11.0

input:
  camera:
    name: Frigate Cameras
    description: Select which frigate.camera entities to watch
    selector:
      entity:
        domain: camera
        integration: frigate
        multiple: true

  notify_device:
    name: Mobile Device
    description: Select an iOS device (mobile_app) to receive the notification
    selector:
      device:
        integration: mobile_app
        multiple: false

  event_types:
    name: Event Types
    description: Alert or detection?
    default:
      - alert
      - detection
    selector:
      select:
        options:
          - label: Alert
            value: alert
          - label: Detection
            value: detection
        multiple: true

  loitering_types:
    name: Loitering Detection
    description: Trigger only if `pending_loitering` is true/false
    default:
      - "true"
      - "false"
    selector:
      select:
        options:
          - label: Pending Loitering
            value: "true"
          - label: Not Loitering
            value: "false"
        multiple: true

  initial_delay:
    name: Initial Delay (seconds)
    description: Seconds to wait before sending the notification
    default: 0
    selector:
      number:
        min: 0
        max: 15
        unit_of_measurement: seconds
        step: 1

  base_url:
    name: Base URL (Optional)
    description: External Home Assistant URL for clips
    default: ""

  mqtt_topic:
    name: MQTT Topic
    description: Where Frigate publishes “new”/“update” events
    default: frigate/reviews

mode: parallel

trigger_variables:
  mqtt_topic: !input mqtt_topic

triggers:
  - platform: mqtt
    topic: "{{ mqtt_topic }}"
    id: frigate-event
    # we'll check new/update + severity later in conditions
    value_template: "{{ value_json.type in ['new','update'] }}"

variables:
  # pull in your inputs
  cameras:            !input camera
  watch_event_types:  !input event_types
  watch_loiter:       !input loitering_types
  delay_secs:         !input initial_delay
  url_base:           !input base_url

  # expand friendly camera names
  camera_names: >
    {{ cameras
       | expand
       | map(attribute='attributes.camera_name')
       | list }}

  # stash the raw payload
  event:        "{{ trigger.payload_json }}"
  event_type:   "{{ event.type }}"
  severity:     "{{ event.after.severity }}"
  camera:       "{{ event.after.camera }}"
  camera_name:  "{{ camera.replace('_',' ') | title }}"
  pending_loitering: >
    {{ event.after.get('pending_loitering', false) | string | lower }}

  # boolean flags
  type_ok:      "{{ event_type in ['new','update'] }}"
  sev_ok:       "{{ severity in watch_event_types }}"
  cam_ok:       "{{ camera in camera_names }}"
  loiter_ok:    "{{ pending_loitering in watch_loiter }}"

  clean_base:   "{{ url_base.rstrip('/') }}"

conditions:
  - condition: template
    # only continue if new/update & right severity & matching camera
    value_template: >
      {{ type_ok and sev_ok and cam_ok }}

actions:
  - choose:
      - alias: Send Frigate Notification
        conditions:
          # finally check loitering preference
          - condition: template
            value_template: "{{ loiter_ok }}"
        sequence:
          # optional startup delay
          - choose:
              - conditions: "{{ delay_secs > 0 }}"
                sequence:
                  - delay:
                      seconds: "{{ delay_secs }}"

          # send it
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: >
              {{ 'Loitering' if pending_loitering=='true'
                 else severity | capitalize }} on {{ camera_name }}
            message: >
              {{ 'Object stopped' if pending_loitering=='true'
                 else severity | capitalize ~ ' detected' }} on {{ camera_name }}
            data:
              tag:            "{{ event.after.data.detections[0] }}"
              group:          "{{ camera }}-frigate-notification"
              image:          "{{ clean_base }}/api/frigate/notifications/{{ event.after.data.detections[0] }}/thumbnail.jpg"
              video:          "{{ clean_base }}/api/frigate/notifications/{{ event.after.data.detections[0] }}/{{ camera }}/clip.mp4"
              clickAction:    "{{ clean_base }}/api/frigate/notifications/{{ event.after.data.detections[0] }}/{{ camera }}/clip.mp4"
              ttl:            0
              priority:       high
              notification_icon: mdi:car
              channel:        alarm_stream
              actions:
                - action: URI
                  title: View Clip
                  uri:   "{{ clean_base }}/api/frigate/notifications/{{ event.after.data.detections[0] }}/{{ camera }}/clip.mp4"
                - action: URI
                  title: View Snapshot
                  uri:   "{{ clean_base }}/api/frigate/notifications/{{ event.after.data.detections[0] }}/snapshot.jpg"
