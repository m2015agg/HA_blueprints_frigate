blueprint:
  name: Frigate Notifications (Simple)
  domain: automation
  source_url: "https://github.com/m2015agg/HA_blueprints_frigate/blob/main/Frigate_Camera_Notifications/Beta3.yaml"
  description: |
    A simplified version of the Frigate Camera Notifications blueprint focusing on core features.
    Handles both regular detections and loitering events with configurable notification preferences. test

  input:
    camera:
      name: Frigate Cameras
      description: Select the cameras to monitor.
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true

    notify_device:
      name: Mobile Device
      description: Choose a device running the Home Assistant mobile app to receive notifications.
      selector:
        device:
          integration: mobile_app
          multiple: false

    event_types:
      name: Event Types
      description: Which types of Frigate events to notify on.
      default: [alert, detection]
      selector:
        select:
          options:
            - label: Alerts
              value: alert
            - label: Detections
              value: detection
          multiple: true
          custom_value: false
          sort: false

    loitering_types:
      name: Loitering Detection
      description: Notify when `pending_loitering` is true or false.
      default: ["true", "false"]
      selector:
        select:
          options:
            - label: Pending Loitering
              value: "true"
            - label: Nonâ€‘Loitering
              value: "false"
          multiple: true
          custom_value: false
          sort: false

    initial_delay:
      name: Initial Delay
      description: Seconds to wait before sending the first notification.
      default: 0
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: seconds
          step: 1

    base_url:
      name: Base URL (Optional)
      description: External URL of your Home Assistant (for clips).
      default: ""
      selector:
        text: {}

    mqtt_topic:
      name: MQTT Topic
      description: Topic where Frigate publishes detection events (usually frigate/events).
      default: frigate/events
      selector:
        text: {}

    alert_once:
      name: Alert Once
      description: >
        When enabled, only one notification will be sent per event ID.
        This prevents duplicate notifications for the same object detection event.
        Recommended to keep enabled to avoid notification spam.
      default: true
      selector:
        boolean: {}

mode: single
trigger:
  platform: mqtt
  topic: !input mqtt_topic
  id: frigate-event
  value_template: "{{ value_json.type in ['new','update'] }}"

action:
  - variables:
      event: "{{ trigger.payload_json }}"
      event_type: "{{ event.type }}"
      severity: "{{ event.after.max_severity | default('detection') }}"
      camera: "{{ event.after.camera }}"
      camera_name: "{{ camera.replace('_',' ') | title }}"
      pending_loitering: "{{ event.after.get('pending_loitering', false) | string | lower }}"
      cameras: !input camera
      notify_device: !input notify_device
      allowed_types: !input event_types
      allowed_loiter: !input loitering_types
      init_delay: !input initial_delay
      input_base_url: !input base_url
      base_url: "{{ input_base_url.rstrip('/') if input_base_url else '' }}"
      alert_once: !input alert_once
      event_id: "{{ event.after.id }}"
      camera_names: >
        {{ cameras | expand | map(attribute='name') | list }}
      type_ok: "{{ event_type in ['new','update'] }}"
      severity_ok: "{{ severity in allowed_types }}"
      camera_ok: "{{ camera in camera_names }}"
      loiter_ok: "{{ pending_loitering in allowed_loiter }}"
      first_detection: "{{ event.after.motionless_count == 1 }}"
      motionless_time: "{{ event.after.motionless_count }}"
      false_positive: "{{ event.after.false_positive }}"
      score: "{{ event.after.score }}"
      label: "{{ event.after.label }}"
      zones: "{{ event.after.current_zones }}"

  - service: persistent_notification.create
    data:
      title: "Debug Info"
      message: >
        Event Type: {{ event_type }}
        Camera: {{ camera }}
        Camera Name: {{ camera_name }}
        Selected Cameras: {{ camera_names }}
        Label: {{ label }}
        Score: {{ score }}
        False Positive: {{ false_positive }}
        Zones: {{ zones }}
        Type OK: {{ type_ok }}
        Severity OK: {{ severity_ok }}
        Camera OK: {{ camera_ok }}
        Loiter OK: {{ loiter_ok }}
        Pending Loitering: {{ pending_loitering }}
        First Detection: {{ first_detection }}
        Motionless Time: {{ motionless_time }}
        Allowed Types: {{ allowed_types }}
        Main Condition: {{ type_ok and severity_ok and camera_ok and not false_positive }}
        - Type OK: {{ type_ok }}
        - Severity OK: {{ severity_ok }}
        - Camera OK: {{ camera_ok }}
        - Not False Positive: {{ not false_positive }}
        Notification Condition: {{ loiter_ok and (
          (pending_loitering == 'true' and (first_detection or motionless_time | int > 100)) or
          (pending_loitering == 'false')
        ) }}
        Camera Names: {{ camera_names }}
        Event ID: {{ event_id }}
        Notified Events: {{ this.attributes.get('notified_events', []) }}
        Loitering Details:
        - Pending Loitering: {{ pending_loitering }}
        - Motionless Time: {{ motionless_time }}
        - First Detection: {{ first_detection }}
        - Threshold: 100
        - Should Notify: {{ pending_loitering == 'true' and (first_detection or motionless_time | int > 100) }}

  - condition: template
    value_template: "{{ type_ok and severity_ok and camera_ok and not false_positive }}"

  - condition: or
    conditions:
      - condition: template
        value_template: "{{ not alert_once }}"
      - condition: template
        value_template: >
          {{ not this.attributes.get('notified_events', [])|select('eq', event_id)|list|count }}

  - choose:
      - alias: Send Notification
        conditions:
          - condition: template
            value_template: >
              {{ loiter_ok and (
                (pending_loitering == 'true' and (first_detection or motionless_time | int > 100)) or
                (pending_loitering == 'false')
              ) }}
        sequence:
          - if:
              - condition: template
                value_template: "{{ init_delay > 0 }}"
            then:
              - delay:
                  seconds: "{{ init_delay }}"
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: >
              {{ 'Loitering' if pending_loitering == 'true' else severity | capitalize }} on {{ camera_name }}
            message: >
              {{ 'Object stopped' if pending_loitering == 'true' else severity | capitalize ~ ' detected' }} on {{ camera_name }}
            data:
              tag: '{{ event.after.id }}'
              group: '{{ camera }}-frigate-notification'
              image: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/thumbnail.jpg'
              video: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/{{ camera }}/clip.mp4'
              clickAction: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/{{ camera }}/clip.mp4'
              ttl: 0
              priority: high
              notification_icon: mdi:car
              channel: alarm_stream
              actions:
                - action: URI
                  title: View Clip
                  uri: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/{{ camera }}/clip.mp4'
                - action: URI
                  title: View Snapshot
                  uri: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/snapshot.jpg'
              data:
                event_id: "{{ event.after.id }}"
                camera: "{{ camera }}"
                label: "{{ event.after.label }}"
                score: "{{ event.after.score }}"
                zones: "{{ event.after.current_zones }}"
                has_clip: "{{ event.after.has_clip }}"
                has_snapshot: "{{ event.after.has_snapshot }}"

  - service: automation.update
    target:
      entity_id: "{{ this.entity_id }}"
    data:
      variables:
        notified_events: "{{ (this.attributes.get('notified_events', []) + [event_id])[-100:] }}"
