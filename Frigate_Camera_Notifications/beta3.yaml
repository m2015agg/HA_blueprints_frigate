blueprint:
  name: Frigate Notifications (Simple)
  domain: automation
  source_url: "https://github.com/m2015agg/HA_blueprints_frigate/blob/main/Frigate_Camera_Notifications/Beta3.yaml"
  description: |
    A simplified version of the Frigate Camera Notifications blueprint focusing on core features.
    Handles both regular detections and loitering events with configurable notification preferences. test

  input:
    camera:
      name: Frigate Cameras
      description: Select the cameras to monitor.
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: true

    notify_device:
      name: Mobile Device
      description: Choose a device running the Home Assistant mobile app to receive notifications.
      selector:
        device:
          integration: mobile_app
          multiple: false

    event_types:
      name: Event Types
      description: Which types of Frigate events to notify on.
      default: [alert, detection]
      selector:
        select:
          options:
            - label: Alerts
              value: alert
            - label: Detections
              value: detection
          multiple: true
          custom_value: false
          sort: false

    loitering_types:
      name: Loitering Detection
      description: Notify when `pending_loitering` is true or false.
      default: ["true", "false"]
      selector:
        select:
          options:
            - label: Pending Loitering
              value: "true"
            - label: Nonâ€‘Loitering
              value: "false"
          multiple: true
          custom_value: false
          sort: false

    initial_delay:
      name: Initial Delay
      description: Seconds to wait before sending the first notification.
      default: 0
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: seconds
          step: 1

    base_url:
      name: Base URL (Optional)
      description: External URL of your Home Assistant (for clips).
      default: ""
      selector:
        text: {}

    mqtt_topic:
      name: MQTT Topic
      description: Topic where Frigate publishes detection events (usually frigate/events).
      default: frigate/events
      selector:
        text: {}

    alert_once:
      name: Alert Once
      description: >
        When enabled, only one notification will be sent per event ID.
        This prevents duplicate notifications for the same object detection event.
        Recommended to keep enabled to avoid notification spam.
      default: true
      selector:
        boolean: {}

mode: single
trigger:
  platform: mqtt
  topic: !input mqtt_topic
  id: frigate-event
  value_template: "{{ value_json.type in ['new','update'] }}"

action:
  - variables:
      event: "{{ trigger.payload_json }}"
      event_type: "{{ event.type }}"
      severity: "{{ event.after.max_severity | default('detection') }}"
      camera: "{{ event.after.camera }}"
      camera_name: "{{ camera.replace('_',' ') | title }}"
      pending_loitering: "{{ event.after.get('pending_loitering', false) | string | lower }}"
      cameras: !input camera
      notify_device: !input notify_device
      allowed_types: !input event_types
      allowed_loiter: !input loitering_types
      init_delay: !input initial_delay
      input_base_url: !input base_url
      base_url: "{{ input_base_url.rstrip('/') if input_base_url else '' }}"
      alert_once: !input alert_once
      event_id: "{{ event.after.id }}"
      camera_names: >
        {% set names = [] %}
        {% for cam in cameras | expand %}
          {% set friendly_name = cam.attributes.friendly_name | default('') %}
          {% set entity_id = cam.entity_id.split('.')[1] %}
          {% set formatted_name = friendly_name if friendly_name else entity_id.replace('_', ' ').title() %}
          {% set _ = names.append({
            'friendly_name': friendly_name,
            'entity_id': entity_id,
            'formatted_name': formatted_name,
            'raw': cam
          }) %}
        {% endfor %}
        {{ names }}
      type_ok: "{{ event_type in ['new','update'] }}"
      severity_ok: "{{ severity in allowed_types }}"
      camera_ok: >
        {% set camera_matches = [] %}
        {% for cam in camera_names %}
          {% set match = (
            camera == cam.entity_id or
            camera_name == cam.formatted_name or
            camera == cam.friendly_name
          ) %}
          {% set _ = camera_matches.append({
            'entity_id': cam.entity_id,
            'friendly_name': cam.friendly_name,
            'formatted_name': cam.formatted_name,
            'matches': match
          }) %}
        {% endfor %}
        {{ camera_matches | selectattr('matches') | list | length > 0 }}
      loiter_ok: "{{ pending_loitering in allowed_loiter }}"
      first_detection: "{{ event.after.motionless_count == 1 }}"
      motionless_time: "{{ event.after.motionless_count }}"
      false_positive: "{{ event.after.false_positive }}"
      score: "{{ event.after.score }}"
      label: "{{ event.after.label }}"
      zones: "{{ event.after.current_zones }}"

  - service: persistent_notification.create
    data:
      title: "Debug Info"
      message: >
        Event Type: {{ event_type }}
        Camera Details:
        - Raw Camera from Frigate: {{ camera }}
        - Formatted Camera Name: {{ camera_name }}
        - Camera OK: {{ camera_ok }}
        - Camera Matches:
          {% for match in camera_matches %}
          - Entity ID: {{ match.entity_id }}
            Friendly Name: {{ match.friendly_name }}
            Formatted Name: {{ match.formatted_name }}
            Matches: {{ match.matches }}
          {% endfor %}
        Event Details:
        - Label: {{ label }}
        - Score: {{ score }}
        - False Positive: {{ false_positive }}
        - Zones: {{ zones }}
        - Type OK: {{ type_ok }}
        - Severity OK: {{ severity_ok }}
        - Severity: {{ severity }}
        - Allowed Types: {{ allowed_types }}
        Loitering Details:
        - Pending Loitering: {{ pending_loitering }}
        - Loiter OK: {{ loiter_ok }}
        - Allowed Loiter: {{ allowed_loiter }}
        - First Detection: {{ first_detection }}
        - Motionless Time: {{ motionless_time }}
        - Threshold: 100
        - Should Notify: {{ pending_loitering == 'true' and (first_detection or motionless_time | int > 100) }}
        Notification Conditions:
        - Main Condition: {{ type_ok and severity_ok and camera_ok and not false_positive }}
        - Type OK: {{ type_ok }}
        - Severity OK: {{ severity_ok }}
        - Camera OK: {{ camera_ok }}
        - Not False Positive: {{ not false_positive }}
        - Notification Condition: {{ loiter_ok and (
          (pending_loitering == 'true' and (first_detection or motionless_time | int > 100)) or
          (pending_loitering == 'false')
        ) }}
        Event Tracking:
        - Event ID: {{ event_id }}
        - Notified Events: {{ this.attributes.get('notified_events', []) }}
        - Alert Once: {{ alert_once }}
        - Already Notified: {{ event_id in this.attributes.get('notified_events', []) }}

  - condition: template
    value_template: "{{ type_ok and severity_ok and camera_ok and not false_positive }}"

  - condition: template
    value_template: >
      {{ not (event_id in this.attributes.get('notified_events', [])) }}

  - choose:
      - alias: Send Notification
        conditions:
          - condition: template
            value_template: >
              {{ loiter_ok and (
                (pending_loitering == 'true' and (first_detection or motionless_time | int > 100)) or
                (pending_loitering == 'false' and first_detection)
              ) }}
        sequence:
          - if:
              - condition: template
                value_template: "{{ init_delay > 0 }}"
            then:
              - delay:
                  seconds: "{{ init_delay }}"
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: >
              {{ 'Loitering' if pending_loitering == 'true' else severity | capitalize }} on {{ camera_name }}
            message: >
              {{ 'Object stopped' if pending_loitering == 'true' else severity | capitalize ~ ' detected' }} on {{ camera_name }}
            data:
              tag: '{{ event.after.id }}'
              group: '{{ camera }}-frigate-notification'
              image: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/snapshot.jpg'
              video: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/{{ camera }}/clip.mp4'
              clickAction: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/{{ camera }}/clip.mp4'
              ttl: 0
              priority: high
              notification_icon: mdi:car
              channel: alarm_stream
              actions:
                - action: URI
                  title: View Clip
                  uri: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/{{ camera }}/clip.mp4'
                - action: URI
                  title: View Snapshot
                  uri: '{{ base_url }}/api/frigate/notifications/{{ event.after.id }}/snapshot.jpg'
              data:
                event_id: "{{ event.after.id }}"
                camera: "{{ camera }}"
                label: "{{ event.after.label }}"
                score: "{{ event.after.score }}"
                zones: "{{ event.after.current_zones }}"
                has_clip: "{{ event.after.has_clip }}"
                has_snapshot: "{{ event.after.has_snapshot }}"
                snapshot_time: "{{ event.after.snapshot.frame_time }}"
                motionless_time: "{{ motionless_time }}"
                pending_loitering: "{{ pending_loitering }}"
                first_detection: "{{ first_detection }}"

  - service: input_text.set_value
    target:
      entity_id: "input_text.frigate_notified_events"
    data:
      value: "{{ (this.attributes.get('notified_events', []) + [event_id])[-100:] | join(',') }}"
